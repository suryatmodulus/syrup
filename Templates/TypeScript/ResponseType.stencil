{% macro buildResponse name fields fragmentNames spacing fieldPrefix %}
{{ spacing }}export interface {{ name }} {
{{ spacing }}  __typename: '{{ typeName }}';
  {% for field in fields %}
  {% with field.attributes as attributes %}{% include "Helpers/Attributes.stencil" %}{% endwith %}
{{ spacing }}  {{ field|renderPropertyDeclaration:fieldPrefix }};
  {% endfor %}
  {% for fragmentName in fragmentNames %}
{{ spacing }}  {{ fragmentName|lowercasedFirstLetter }}: {{ fragmentName }}FragmentData;
  {% endfor %}
{{ spacing }}}
{% endmacro %}

{% macro renderFields fields name %}
{% for field in fields %}
{{ field|internalTypeDefinition:name }}
{{ field|internalInterfaceWrapper:name }}
{{ field|internalUnionWrapper:name }}
{% endfor %}
{% endmacro %}

{% if asFile %}import { ID, GraphSelection, copyWithTypeCondition } from "../GraphApi"
{{ header }}
{% if fileReferencedEnums.count > 0 %}import {
  {% for enum in fileReferencedEnums %}{{ enum }},
  {% endfor %}
} from "../Enums"{% endif %}
{% for fragment in fileReferencedFragments %}import {
  {{ fragment }}FragmentData,
  {{ fragment|lowercasedFirstLetter }}FragmentDataSelections
} from "./{{ fragment }}"
{% endfor %}
{% endif %}

{% if asFile and hasInternalDefinitions %}export namespace {{ name }} {
{% call renderFields fields "" %}
}
{% else %}
{% call renderFields fields name %}
{% endif %}

{% if asFile %}
{% call buildResponse name fields fragmentNames "" fieldPrefix %}
{% else %}
{% call buildResponse name fields fragmentNames "  " name %}
{% endif %}

{% if asFile and fragmentSelections %}
export const {{ name|lowercasedFirstLetter }}Selections: GraphSelection[] = {{ fragmentSelections|renderTypeScriptSelections:null,0 }}
{% endif %}
