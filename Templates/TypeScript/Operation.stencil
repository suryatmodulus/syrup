import { ID, GraphSelection, SyrupOperation, copyWithTypeCondtion } from "../GraphApi"
{{ header }}
{% if importEnums %}import * as Enums from "../Enums"{% endif %}
{% if importInputs %}import * as Inputs from "../Inputs"{% endif %}
{% if importFragments %}import * as Fragments from "../Fragments"{% endif %}

export namespace {{ name }} {
  {% if operation.variables.count > 0 %}export interface Variables {
    {{ operation.variables|renderTypeScriptArguments }}
  }{% endif %}
  
  {% for field in fields %}
  {{ field|internalTypeDefinition }}
  {% endfor %}

  {% for field in fields %}
  {{ field|internalInterfaceWrapper }}
  {% endfor %}

  {% for field in fields %}
  {{ field|internalUnionWrapper }}
  {% endfor %}
}

export interface {{ name }} {
  {% for field in fields %}
  {% with field.attributes as attributes %}{% include "Helpers/Attributes.stencil" %}{% endwith %}
  {{ field|renderPropertyDeclaration:fieldPrefix }}{% if fragmentNames or not forloop.last %},{% endif %}
  {% endfor %}
  {% for fragmentName in fragmentNames %}
  {{ fragmentName|lowercasedFirstLetter }}: Fragments.{{ fragmentName }}{% if not forloop.last %},{% endif %}
  {% endfor %}
}

const document: SyrupOperation<{{ name }}, {% if operation.variables.count > 0 %}{{ name }}.Variables{% else %}{}{% endif %}> = {
  id: "{{ encryptedId }}",
  name: "{{ operation.name }}",
  source: "{{ queryString|replace:"$","\$"|replaceQuotes }}",
  operationType: '{{ operation|renderOperationTypeName|lowercase } }}',
  selections: {{ selections|renderTypeScriptSelections:null,operation.variables.count }}
}
export default document
