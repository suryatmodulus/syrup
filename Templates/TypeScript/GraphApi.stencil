{{ supportFilesHeader }}
export const DEFINED_NULL_FLAG = "__DEFINED_NULL"

export interface GraphSelectionArguments {
  name: string,
  arguments: Record<string, any>,
  type: TypeDefinition,
  passedGID: string | null,
  typeCondition: TypeDefinition | null,
  directive: ConditionalDirective | null,
  selections: Array<GraphSelection>
}

export class GraphSelection {
  readonly name: string
  readonly arguments: Record<string, any>
  readonly type: TypeDefinition
  readonly passedGID: string | null
  readonly typeCondition: TypeDefinition | null
  readonly directive: ConditionalDirective | null
  readonly selections: Array<GraphSelection>

  constructor(graphSelectionArguments: GraphSelectionArguments) {
    this.name = graphSelectionArguments.name
    this.arguments = graphSelectionArguments.arguments
    this.type = graphSelectionArguments.type
    this.passedGID = graphSelectionArguments.passedGID
    this.typeCondition = graphSelectionArguments.typeCondition
    this.directive = graphSelectionArguments.directive
    this.selections = graphSelectionArguments.selections
  }

  hasSelections(): boolean {
    return this.selections.length != 0
  }

  copyWithTypeCondition(typeCondition: TypeDefinition | null): GraphSelection {
    return new GraphSelection({
      name: this.name,
      arguments: this.arguments,
      type: this.type,
      passedGID: this.passedGID,
      typeCondition: typeCondition,
      directive: this.directive,
      selections: this.selections,
    })
  }
}

export interface ConditionalDirective {
  type: 'include' | 'skip',
  value: boolean
}

export interface TypeDefinition {
  name: string,
  definedType: string
}

export interface Response {}

export abstract class SyrupOperation<T extends Response> {
  constructor(
    readonly operationType: string,
    readonly rawQueryString: string,
    readonly operationVariables: Record<string, any>,
    readonly selections: Array<GraphSelection>
  ) {}

  getQueryString(): string {
    if (Object.keys(this.operationVariables).length != 0) {
      const variablesStringified = JSON.stringify(this.operationVariables)
      const variablesWithNulls = setDefinedNulls(variablesStringified)

      return `{ "query": "${this.rawQueryString}", "variables": ${variablesWithNulls} }`
    }

    return `{ "query": "${this.rawQueryString}" }`
  }

  abstract decodeResponse(jsonObject: Object): T
}

export abstract class Query<T extends Response> extends SyrupOperation<T> {
  constructor(
    readonly rawQueryString: string,
    readonly operationVariables: Record<string, any>,
    readonly selections: Array<GraphSelection>
  ) {
    super('query', rawQueryString, operationVariables, selections)
  }
}

export abstract class Mutation<T extends Response> extends SyrupOperation<T> {
  constructor(
    readonly rawQueryString: string,
    readonly operationVariables: Record<string, any>,
    readonly selections: Array<GraphSelection>
  ) {
    super('mutation', rawQueryString, operationVariables, selections)
  }
}

export abstract class Subscription<T extends Response> extends SyrupOperation<T> {
  constructor(
    readonly rawQueryString: string,
    readonly operationVariables: Record<string, any>,
    readonly selections: Array<GraphSelection>
  ) {
    super('subscription', rawQueryString, operationVariables, selections)
  }
}

export class ID {
  constructor(readonly id: string) {}
}

export function setDefinedNulls(value: string): string {
  return value.replace(`${DEFINED_NULL_FLAG}`, "null")
}
