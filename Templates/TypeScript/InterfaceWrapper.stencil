{% if asFile %}
import { ID, Response, GraphSelection } from "../GraphApi"
import { ScalarResolver } from "../ScalarResolver"
{{ header }}
{% if importEnums %}import * as Enums from "../Enums"{% endif %}
{% if fragmentNames.count > 0 %}import * as Fragments from "../Fragments"{% endif %}
{% endif %}

export interface {{ name }}_Arguments {
  realized: {{ name }}_Realized{% if baseFields or fragmentSpreads %},{% endif %}
  {% for field in baseFields %}
  {% with field.attributes as attributes %}{% include "Helpers/Attributes.stencil" %}{% endwith %}
  {{ field|renderPropertyDeclaration }}{% if fragmentSpreads or not forloop.last %},{% endif %}
  {% endfor %}
  {% for fragment in fragmentSpreads %}
  {{ fragment.name|lowercasedFirstLetter }}: Fragments.{{ fragment.name }}{% if not forloop.last %},{% endif %}
  {% endfor %}
}

export class {{ name }} implements Response {
  readonly realized: {{ name }}_Realized
  {% for field in baseFields %}
  readonly {{ field|renderPropertyDeclaration }}
  {% endfor %}
  {% for fragment in fragmentSpreads %}
  readonly {{ fragment.name|lowercasedFirstLetter }}: Fragments.{{ fragment.name }}
  {% endfor %}

  constructor(responseArguments: {{ name }}_Arguments) {
    this.realized = responseArguments.realized
    {% for field in baseFields %}
    this.{{ field.name }} = responseArguments.{{ field.name }}
    {% endfor %}
    {% for fragmentName in fragmentNames %}
    this.{{ fragmentName|lowercasedFirstLetter }} = responseArguments.{{ fragmentName|lowercasedFirstLetter }}
    {% endfor %}
  }

  static fromJson(jsonObject: any) {
    return new this({
      realized: function(typename: string): {{ name }}_Realized {
        switch(typename) {
          {% for concreteType in concreteTypeNames %}
          case "{{ concreteType }}": 
            {{ name }}_Realized_{{ concreteType }}.fromJson(jsonObject)
          {% endfor %}
          default:
            return new {{ name }}_Realized_Other()
        }
      }(jsonObject["__typename"]){% if baseFields or fragmentSpreads %},{% endif %}
      {% for field in baseFields %}
      {{ field|decodeField }}{% if fragmentSpreads or not forloop.last %},{% endif %}
      {% endfor %}
      {% for fragment in fragmentSpreads %}
      {{ fragment.name|lowercasedFirstLetter }}: Fragments.{{ fragment.name }}.fromJson(jsonObject){% if not forloop.last %},{% endif %}
      {% endfor %}
    })
  }

  static typeName(): string {
    return "{{ interfaceTypeName }}"
  } 

  static getSelections(operationVariables: Record<string, any>): Array<GraphSelection> {
    return {{ fragmentSelections|renderTypeScriptSelections }}
  }
}

export interface {{ name }}_Realized {}

{{ collectedFields|internalInterfaceTypeDefinitions:name,groupedFragmentSpreads,concreteTypeNames }}
export class {{ name }}_Realized_Other implements {{ name }}_Realized {}

{% for field in baseFields %}
{{ field|internalTypeDefinition }}
{% endfor %}

{% for field in baseFields %}
{{ field|internalInterfaceWrapper }}
{% endfor %}

{% for field in baseFields %}
{{ field|internalUnionWrapper }}
{% endfor %}