{% macro buildInterface name baseFields fragmentSpreads concreteTypeNames spacing fieldPrefix %}
{{ spacing }}export interface {{ name }} {
{{ spacing }}  __typename: {% if concreteTypeNames.count > 0 %}{% for concreteType in concreteTypeNames %}'{{ concreteType }}'{% if not forloop.last %} | {% endif %}{% endfor %}{% else %}unknown{% endif %};
{{ spacing }}  realized: {% if concreteTypeNames.count > 0 %}{% for concreteType in concreteTypeNames %}{{ fieldPrefix }}Realized{{ concreteType }}{% if not forloop.last %} | {% endif %}{% endfor %}{% else %}unknown{% endif %};
  {% for field in baseFields %}
  {% with field.attributes as attributes %}{% include "Helpers/Attributes.stencil" %}{% endwith %}
{{ spacing }}  {{ field|renderPropertyDeclaration:fieldPrefix }};
  {% endfor %}
  {% for fragment in fragmentSpreads %}
{{ spacing }}  {{ fragment.name|lowercasedFirstLetter }}: {{ fragment.name }}FragmentData;
  {% endfor %}
{{ spacing }}}
{% endmacro %}

{% macro renderFields fields name collectedFields groupedFragmentSpreads concreteTypeNames %}
{% for field in fields %}
{{ field|internalTypeDefinition:name }}
{{ field|internalInterfaceWrapper:name }}
{{ field|internalUnionWrapper:name }}
{% endfor %}

{{ collectedFields|internalInterfaceTypeDefinitions:name,groupedFragmentSpreads,concreteTypeNames }}
{% endmacro %}

{% if asFile %}import { ID, GraphSelection, copyWithTypeCondition } from "../GraphApi"
{{ header }}
{% if fileReferencedEnums.count > 0 %}import {
  {% for enum in fileReferencedEnums %}{{ enum }},
  {% endfor %}
} from "../Enums"{% endif %}
{% for fragment in fileReferencedFragments %}import {
  {{ fragment }}FragmentData,
  {{ fragment|lowercasedFirstLetter }}FragmentDataSelections
} from "./{{ fragment }}"
{% endfor %}
{% endif %}

{% if hasInternalDefinitions and asFile %}export namespace {{ name }} {
{% call renderFields baseFields "" collectedFields groupedFragmentSpreads concreteTypeNames %}
}
{% else %}
{% call renderFields baseFields name collectedFields groupedFragmentSpreads concreteTypeNames %}
{% endif %}
  
{% if asFile %}
{% call buildInterface name baseFields fragmentSpreads concreteTypeNames "" fieldPrefix %}
{% else %}
{% call buildInterface name baseFields fragmentNames concreteTypeNames "  " name %}
{% endif %}

{% if asFile and fragmentSelections %}
export const {{ name|lowercasedFirstLetter }}Selections: GraphSelection[] = {{ fragmentSelections|renderTypeScriptSelections:null,0 }}
{% endif %}
